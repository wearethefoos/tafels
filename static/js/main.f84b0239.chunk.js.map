{"version":3,"sources":["Score.js","DialerKey.js","Dialer.js","Exercise.js","Practice.js","App.js","serviceWorker.js","index.js"],"names":["score","className","label","value","onClick","dialerKeys","Dialer","onSubmit","useState","setValue","map","num","key","counter","multiplier","calculatePoints","correct","includes","newExercise","Math","round","random","Practice","points","state","setState","processResponse","response","parseInt","checkResponse","newCounter","newMultiplier","console","table","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f84b0239.chunk.js","sourcesContent":["import React from 'react';\nimport './Score.css';\n\nexport default ({ score }) => (\n  <div className=\"Score\">{score}</div>\n);\n","import React from 'react';\nimport './DialerKey.css';\n\nexport default ({ label, value, onClick }) => (\n  <button\n    className=\"DialerKey\"\n    onClick={() => onClick(value)}\n  >\n    {label}\n  </button>\n);\n","import React, { useState } from 'react';\nimport DialerKey from './DialerKey';\nimport './Dialer.css';\n\nconst dialerKeys = [1,2,3,4,5,6,7,8,9,0];\n\nexport default function Dialer({ onSubmit }) {\n  const [value, setValue] = useState(null);\n\n  return (\n    <div className=\"Dialer\">\n      <div className=\"Display\">\n        = {value === null ? '...?' : value}\n      </div>\n\n      <div className=\"DialerPad\">\n        {dialerKeys.map(num => (\n          <DialerKey\n            key={num}\n            label={num}\n            value={num}\n            onClick={() => setValue(`${value === null ? '' : value}${num}`)}\n          />\n        ))}\n      </div>\n\n      <div className=\"DialerActions\">\n        <button className=\"Clear\" onClick={() => setValue(null)}>✖</button>\n        <button className=\"Submit\" onClick={() => {setValue(null); onSubmit(value)}}>✔</button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Exercise.css';\n\nexport default ({counter, multiplier}) => (\n  <div className=\"Exercise\">\n    <span className=\"counter\">{counter}</span>\n    <span className=\"times\">{` ✖ `}</span>\n    <span className=\"multiplier\">{multiplier}</span>\n  </div>\n)\n","import React, { useState } from 'react';\nimport Score from './Score';\nimport Dialer from './Dialer';\nimport Exercise from './Exercise';\nimport './Practice.css';\n\nconst calculatePoints = (correct, counter, multiplier) => {\n  if (!correct) return -100;\n  if ([0,1,10].includes(counter) || [0,1,10].includes(multiplier)) return 100;\n  if ([2,5].includes(counter) || [2,5].includes(multiplier)) return 200;\n  return 500;\n}\n\nconst newExercise = () =>\n  [Math.round(Math.random() * 10), Math.round(Math.random() * 10)];\n\nconst checkResponse = ({ counter, multiplier, response }) => {\n  if (counter * multiplier === parseInt(response)) {\n    return [true, ...newExercise(), calculatePoints(true, counter, multiplier)];\n  }\n\n  return [false, counter, multiplier, calculatePoints(false, counter, multiplier)];\n}\n\nfunction Practice() {\n  const [counter, multiplier] = newExercise();\n  const [state, setState] = useState({ counter, multiplier, points: 0 });\n\n  const processResponse = (counter, multiplier, response) => {\n    const [correct, newCounter, newMultiplier, points] = checkResponse({counter, multiplier, response});\n    setState({ correct, counter: newCounter, multiplier: newMultiplier, points: state.points + points });\n  }\n\n  console.table(state);\n\n  return (\n    <div className=\"Practice\">\n      <Score score={state.points} />\n      <Exercise counter={state.counter} multiplier={state.multiplier} />\n      <Dialer onSubmit={(response) => processResponse(state.counter, state.multiplier, response)}/>\n    </div>\n  );\n}\n\nexport default Practice;\n","import React, { useState } from 'react';\nimport Practice from './Practice';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Practice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}